# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  workflow_dispatch
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

jobs:
  buildapp:
    runs-on: ubuntu-latest
    #runs-on: Linux
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven
      id: buildapp
      run: mvn -B package --file pom.xml
    # Publish artifact
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: published-app
        path: './target'
    - name: Test 
      run: |
        jq --version
        
  sonarqube:
    #runs-on: Linux
    runs-on: ubuntu-latest
    needs: buildapp
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarqube.thaidevops.com/
      with:
        projectBaseDir: .
        args: >
            -Dsonar.projectName=java-hello-world-public
            -Dsonar.projectKey=java-hello-world-public
            -Dsonar.projectVersion=0.0.0
            -Dsonar.java.binaries=**/*
    - name: SonarQube Quality Gate check
      uses: pisineen/sonarqube-scan-action@main
      # Force to fail step after specific time
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       
#   dependencyCheck:
#     runs-on: ubuntu-latest
#     needs: buildapp
#     name: depecheck_test
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Build project with Maven
#         run: mvn clean install
#       - name: Depcheck
#         uses: dependency-check/Dependency-Check_Action@main
#         id: Depcheck
#         with:
#           project: 'test'
#           path: '.'
#           format: 'SARIF'    
#           args: >
#             --failOnCVSS 7
#             --enableRetired
#       - name: Upload SAST scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v1
#         with:
#             sarif_file: '${{github.workspace}}/reports/dependency-check-report.sarif'
#       - name: Upload Test results
#         uses: actions/upload-artifact@master
#         with:
#            name: Depcheck report
#            path: ${{github.workspace}}/reports
           
#   build-and-push-image:
#       runs-on: ubuntu-latest
#       needs: [buildapp, dependencyCheck]
#       steps:
#         - name: Checkout
#           uses: actions/checkout@v2
#        # Download published artifact
#         - name: Download artifact
#           uses: actions/download-artifact@v2
#           with:
#             name: published-app
#             path: './target'
#         - name: Build an image from Dockerfile
#           run: docker build -t docker.io/piii/java-hello-world:${{ github.sha }} .
#         - name: Run Trivy vulnerability scanner
#           uses: aquasecurity/trivy-action@master
#           with:
#             image-ref: 'docker.io/piii/java-hello-world:${{ github.sha }}'
#             format: 'template'
#             template: '@/contrib/sarif.tpl'
#             output: 'trivy-results.sarif'

#         - name: Upload Trivy scan results to GitHub Security tab
#           uses: github/codeql-action/upload-sarif@v1
#           with:
#             sarif_file: 'trivy-results.sarif'
            
#         - name: Run Trivy vulnerability scanner with GitHub Issue
#           uses: lazy-actions/gitrivy@v3
#           with:
#             token: ${{ secrets.GITHUB_TOKEN }}
#             image: 'docker.io/piii/java-hello-world:${{ github.sha }}'
            
#         - name: build image
#           uses: whoan/docker-build-with-cache-action@v5
#           with:
#             username: piii
#             password: "${{ secrets.DOCKER_HUB_PASSWORD }}"
#             image_name: java-hello-world

#   deploy-prod:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest
#     environment: 'prod'
#     needs: [buildapp,dependencyCheck]
#     env:
#       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Download published artifact
#       - name: Download artifact
#         uses: actions/download-artifact@v2
#         with:
#           name: published-app
#           path: './target'
#       # Deploy
#       - name: Deploy to Production
#         id: deploy-prod
#         run: echo "Hello $FIRST_NAME $middle_name $Last_Name,  Deploy Success !!!"
#         env:
#           FIRST_NAME: Mona
#           middle_name: The
#           Last_Name: Octocat
#       - name: notification to slack
#         uses: act10ns/slack@v1
#         with:
#           status: ${{ job.status }}
#           steps: ${{ toJson(steps) }}
#           channel: '#github-action'
#           config: .github/config/slack.yml
#         if: always()
  
      

  
